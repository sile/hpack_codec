use std::borrow::Cow;

use field::FieldName;
use literal::{Encoding, HpackString};
use table::Index;

#[derive(Debug)]
pub enum Name<'a> {
    Authority,
    Method,
    Path,
    Scheme,
    Status,
    AcceptCharset,
    AcceptEncoding,
    AcceptLanguage,
    AcceptRanges,
    Accept,
    AccessControlAllowOrigin,
    Age,
    Allow,
    Authorization,
    CacheControl,
    ContentDisposition,
    ContentEncoding,
    ContentLanguage,
    ContentLength,
    ContentLocation,
    ContentRange,
    ContentType,
    Cookie,
    Date,
    Etag,
    Expect,
    Expires,
    From,
    Host,
    IfMatch,
    IfModifiedSince,
    IfNoneMatch,
    IfRange,
    IfUnmodifiedSince,
    LastModified,
    Link,
    Location,
    MaxForwards,
    ProxyAuthenticate,
    ProxyAuthorization,
    Range,
    Referer,
    Refresh,
    RetryAfter,
    Server,
    SetCookie,
    StrictTransportSecurity,
    TransferEncoding,
    UserAgent,
    Vary,
    Via,
    WwwAuthenticate,
    Index(u16),
    Name(&'a [u8]),
}
impl<'a> Name<'a> {
    pub fn to_field_name(&self, encoding: Encoding) -> FieldName<Cow<'a, [u8]>> {
        fn index(index: u16) -> FieldName<Cow<'static, [u8]>> {
            FieldName::Index(Index::new(index).expect("TOOD"))
        }
        match *self {
            Name::Authority => index(1),
            Name::Method => index(2),
            Name::Path => index(4),
            Name::Scheme => index(6),
            Name::Status => index(8),
            Name::AcceptCharset => index(15),
            Name::AcceptEncoding => index(16),
            Name::AcceptLanguage => index(17),
            Name::AcceptRanges => index(18),
            Name::Accept => index(19),
            Name::AccessControlAllowOrigin => index(20),
            Name::Age => index(21),
            Name::Allow => index(22),
            Name::Authorization => index(23),
            Name::CacheControl => index(24),
            Name::ContentDisposition => index(25),
            Name::ContentEncoding => index(26),
            Name::ContentLanguage => index(27),
            Name::ContentLength => index(28),
            Name::ContentLocation => index(29),
            Name::ContentRange => index(30),
            Name::ContentType => index(31),
            Name::Cookie => index(32),
            Name::Date => index(33),
            Name::Etag => index(34),
            Name::Expect => index(35),
            Name::Expires => index(36),
            Name::From => index(37),
            Name::Host => index(38),
            Name::IfMatch => index(39),
            Name::IfModifiedSince => index(40),
            Name::IfNoneMatch => index(41),
            Name::IfRange => index(42),
            Name::IfUnmodifiedSince => index(43),
            Name::LastModified => index(44),
            Name::Link => index(45),
            Name::Location => index(46),
            Name::MaxForwards => index(47),
            Name::ProxyAuthenticate => index(48),
            Name::ProxyAuthorization => index(49),
            Name::Range => index(50),
            Name::Referer => index(51),
            Name::Refresh => index(52),
            Name::RetryAfter => index(53),
            Name::Server => index(54),
            Name::SetCookie => index(55),
            Name::StrictTransportSecurity => index(56),
            Name::TransferEncoding => index(57),
            Name::UserAgent => index(58),
            Name::Vary => index(59),
            Name::Via => index(60),
            Name::WwwAuthenticate => index(61),
            Name::Index(i) => index(i),
            Name::Name(name) => FieldName::Name(HpackString::new(name, encoding)),
        }
    }
}
